name: Dev Branch Push Workflow

on:
  push:
    branches-ignore:
      - main

permissions:
  id-token: write
  contents: write

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Tag commit
        run: |
          # configure git
          git config user.email "oliver.tucher@gmail.com"
          git config user.name "GitHub Actions"

          git fetch --tags

          # if commit already tagged, skip tagging
          current_tag=$(git tag --points-at HEAD)
          if [[ $current_tag ]]; then
            echo "commit $(git rev-parse HEAD) already tagged at $current_tag"
            exit 0
          fi

          # get version from package.json and pyproject.toml
          client_version=$(cat client/package.json | jq -r '.version')
          server_version=$(cat server/pyproject.toml | sed -n 's/version = "\(.*\)"/\1/p')
          if [[ $client_version != "$server_version" ]]; then
            echo "Client version \"${client_version}\" and/or server version \"${client_version}\" do not match."
            echo "Please inspect package.json and pyproject.toml files."
            exit 1
          fi
          echo "Version: $client_version"
          version=$client_version

          # check if version is available
          if [[ $(git tag --list "$version") ]]; then
            echo "Version $version already released. Increment version in package.json and pyproject.toml files."
            exit 1
          fi

          # for dev branch, use next available release candidate
          tag=$version
          for i in {1..999}; do
            tag="$version-rc.${i}"
            [[ ! $(git tag --list "$tag") ]] && break
          done
          echo "Tag: $tag"

          # tag :)
          git tag -m "Tagging ${GITHUB_REF#refs/heads/} with $tag" "$tag"
          git push origin "$tag"

  deploy-repository:
    runs-on: ubuntu-latest
    needs: tag
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: us-east-1
      - name: Set environment variables
        run: |
          echo "export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "export AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
          echo "export REPOSITORY=$(echo ${{ github.repository }} | sed 's/^otucher\///')" >> $GITHUB_ENV
          echo "export GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
      - name: Yarn install
        working-directory: cdk
        run: yarn install --dev --network-timeout 100000
      - name: Deploy CDK
        working-directory: cdk
        run: node_modules/.bin/cdk deploy resume-repo --require-approval=never --ci

  build-and-push:
    runs-on: ubuntu-latest
    needs:
      - tag
      - deploy-repository
    strategy:
      matrix:
        directory:
          - client
          - server
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: us-east-1
      - name: Set environment variables
        run: |
          echo "export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "export AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
          echo "export REPOSITORY=$(echo ${{ github.repository }} | sed 's/^otucher\///')" >> $GITHUB_ENV
          echo "export GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
      - name: Build and push image
        working-directory: ${{ matrix.directory }}
        run: |
          ecr_url=$(aws ecr describe-repositories --repository-names $REPOSITORY --query 'repositories[0].repositoryUri' --output text)
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ecr_url
          docker build -t "$ecr_url:${{ matrix.directory }}-$GIT_TAG" .
          docker push "$ecr_url:${{ matrix.directory }}-$GIT_TAG"
          docker tag "$ecr_url:${{ matrix.directory }}-$GIT_TAG" "$ecr_url:${{ matrix.directory }}-latest"
          docker push "$ecr_url:${{ matrix.directory }}-latest"

  deploy-fargate:
    runs-on: ubuntu-latest
    needs:
      - tag
      - build-and-push
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: us-east-1
      - name: Set environment variables
        run: |
          echo "export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "export AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
          echo "export REPOSITORY=$(echo ${{ github.repository }} | sed 's/^otucher\///')" >> $GITHUB_ENV
          echo "export GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
      - name: Yarn install
        working-directory: cdk
        run: yarn install --dev --network-timeout 100000
      - name: Deploy CDK
        working-directory: cdk
        run: node_modules/.bin/cdk deploy resume --require-approval=never --ci
