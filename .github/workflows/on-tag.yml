name: On Tag Workflow

on:
  push:
    tags:
      - '*'

permissions:
  id-token: write
  contents: read

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check client and server version
        run: |
          # get tag, strip release candidate flag
          tag=$(echo ${{ github.event.ref }} | sed 's/refs\/tags\///')
          tag_wo_rc=$(echo $tag | sed -E 's/-rc\.?[0-9]*//')

          client_version=$(cat client/package.json | jq -r '.version')
          server_version=$(cat server/pyproject.toml | sed -n 's/version = "\(.*\)"/\1/p')
          if [[ $client_version != $server_version ]]; then
            echo "Client version \"${client_version}\" and/or server version \"${client_version}\" do not match."
            echo "Please inspect package.json and pyproject.toml files."
            exit 1
          elif [[ $client_version != "$tag_wo_rc" || $server_version != "$tag_wo_rc" ]]; then
            echo "Client version \"${client_version}\" and/or server version \"${client_version}\" do not match tag (without release candidate) \"${tag_wo_rc}\""
            exit 1
          fi

  deploy-repository:
    runs-on: ubuntu-latest
    needs: check-version
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - working-directory: cdk
        run: |
          yarn install --network-timeout 100000
          yarn run build
          export GIT_TAG=$(echo ${{ github.event.ref }} | sed 's/refs\/tags\///')
          export REPOSITORY=$(echo ${{ github.repository }} | sed 's/^otucher\///')
          npx cdk deploy resume-repo --require-approval=never --ci --progress=events

  build-and-push:
    runs-on: ubuntu-latest
    needs: deploy-repository
    strategy:
      matrix:
        directory:
          - client
          - server
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: us-east-1
      - name: Build and push image
        working-directory: ${{ matrix.directory }}
        run: |
          repository=$(echo ${{ github.repository }} | sed 's/^otucher\///')
          ecr_url=$(aws ecr describe-repositories --repository-names $repository --query 'repositories[0].repositoryUri' --output text)
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ecr_url
          tag=$(echo ${{ github.event.ref }} | sed 's/refs\/tags\///')
          docker build -t $ecr_url:${{ matrix.directory }}-$tag .
          docker push $ecr_url:${{ matrix.directory }}-$tag
          docker tag $ecr_url:${{ matrix.directory }}-$tag $ecr_url:${{ matrix.directory }}-latest
          docker push $ecr_url:${{ matrix.directory }}-latest

  deploy-fargate:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - working-directory: cdk
        run: |
          yarn install --network-timeout 100000
          yarn run build
          export REPOSITORY=$(echo ${{ github.repository }} | sed 's/^otucher\///')
          export GIT_TAG=$(echo ${{ github.event.ref }} | sed 's/refs\/tags\///')
          npx cdk deploy resume --require-approval=never --ci --progress=events
